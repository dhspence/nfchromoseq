/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ChromoSeq Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // required inputs
    input                      = null
    outdir                     = null

    // required for demux
    rundir                     = null
    demuxdir                   = "${params.outdir}/demux_fastq"

    tracedir                   = "${params.outdir}/pipeline_info"

    realign                    = false // set to true to input crams and realign them before doing analysis
    publish_dragen_outputs     = false // set to true if analysis is being performed and dragen outputs should be copied

    dragen_container           = "etycksen/dragen4:4.2.4"
    user_group                 = "compute-dspencer"
    queue                      = "dspencer"
    job_group_name             = "/dspencer/chromoseq"

    // References
    fasta                      = "/storage1/fs1/dspencer/Active/spencerlab/refdata/hg38/sequence/hg38_mgi_patch.fa"
    input_cram_reference       = "${params.fasta}"

    // this is for igenomes loading
    genome                     = null 

     // options for testing
    debug                      = false
    bcl_first_tile             = false
    run_demux                  = true
    run_align                  = true
    run_analysis               = true

    // ChromoSeq params
    chromoseq_inputs {
        haplotect       = "$projectDir/assets/accessory_files/haplotect.bed"
        cytobands       = "$projectDir/assets/accessory_files/hg38.cytoBandIdeo.bed.gz"
        cytoband_index  = "$projectDir/assets/accessory_files/hg38.cytoBandIdeo.bed.gz.tbi"
        centromeres     = "$projectDir/assets/accessory_files/GRCh38.GCA_000001405.2_centromere_acen.txt"
        cna_windows     = "$projectDir/assets/accessory_files/hg38.500kb_window.bed"
        gc              = "$projectDir/assets/accessory_files/hg38.gc_500kb.wig"
        mappability     = "$projectDir/assets/accessory_files/hg38.map_500kb.wig"
        pon             = "$projectDir/assets/accessory_files/nextera_hg38_500kb_median_normAutosome_median.rds_median.033020.XY_median.rds"

        vepcache                = "/storage1/fs1/dspencer/Active/clinseq/projects/chromoseq/refdata/VEP_cache"
        gene_bed                = null
        gene_bed_index          = null
        sv_bed                  = null
        sv_bed_index            = null
        sv_targets              = null
        hotspots                = null
        hotspots_index          = null
        custom_annotation_vcf   = null
        custom_annotation_index = null
        assay_specifications    = null
    }

    chromoseq_parameters {
        ichor_ploidy_levels = "2"
        ichor_bin_size = 500000
        dragen_cnv_merge_distance = 5000000
        dragen_cnv_filter_length = 500000
        min_filter_cna_size = 5000000
        min_filter_cna_abundance = 10.0
        sv_annotation_distance = 20000
        min_filter_sv_length = 5000
        max_filter_sv_length = 10000000
        min_filter_sv_abundance = 5.0
        min_filter_sv_reads = 2
        max_smallvariant_sv_length = 1000
        min_smallvariant_reads = 4
        min_smallvariant_vaf = 5.0
        max_pop_af = 0.1
        custom_annotation_parameters = "CHROMOSEQ,vcf,exact,0,TCGA_AC,MDS_AC,BLACKLIST"
        coverage_qc_levels = "10,20,40,60"
    }
    
    // Dragen inputs

    dragen_staging_path     = "/staging/intermediate-results-dir"

    dragen_inputs {
        reference               = "/storage1/fs1/dspencer/Active/spencerlab/refdata/hg38/dragen424_hg38"
        snv_noisefile           = "/storage1/fs1/dspencer/Active/clinseq/projects/chromoseq/refdata/dragen_align_inputs/hg38/dragen_v1.0_systematic_noise.nextera_wgs.120920.bed.gz"
        sv_noisefile            = "/storage1/fs1/dspencer/Active/clinseq/projects/chromoseq/refdata/dragen_align_inputs/hg38/WGS_v2.0.0_hg38_sv_systematic_noise.bedpe.gz"
        dbsnp                   = "/storage1/fs1/dspencer/Active/clinseq/projects/chromoseq/refdata/dragen_align_inputs/hg38/dbsnp.vcf.gz"
        pop_af_vcf              = "/storage1/fs1/dspencer/Active/clinseq/projects/chromoseq/refdata/dragen_align_inputs/hg38/1000G_phase1.snps.high_confidence.hg38.vcf.gz"
        dragen_adapter1         = "/storage1/fs1/dspencer/Active/clinseq/projects/chromoseq/refdata/dragen_align_inputs/hg38/dragen_adapter1.fa"
        dragen_adapter2         = "/storage1/fs1/dspencer/Active/clinseq/projects/chromoseq/refdata/dragen_align_inputs/hg38/dragen_adapter2.fa"
    }

    // MultiQC options
    multiqc_config             = null
    multiqc_title              = "ChromoSeq QC"
    multiqc_logo               = null
    max_multiqc_email_size     = '25.MB'
    multiqc_methods_description = null

    // Boilerplate options
    publish_dir_mode           = 'copy'
    email                      = null
    email_on_fail              = null
    plaintext_email            = false
    monochrome_logs            = false
    hook_url                   = null
    help                       = false
    version                    = false
    validate_params            = true
    show_hidden_params         = false
    schema_ignore_params       = 'publish_dragen_outputs,bcl_first_tile,run_analysis,mastersheet_fields,job_group_name,queue,user_group,dragen_container,rundir,demuxdir,genomes,chromoseq_parameters,chromoseq_inputs,dragen_inputs,dragen_staging_path,input_cram_reference,realign'

    igenomes_base              = 's3://ngi-igenomes/igenomes'
    igenomes_ignore            = true
    
    custom_config_version      = null
    custom_config_base         = null
    config_profile_name        = null
    config_profile_description = null
    config_profile_contact     = null
    config_profile_url         = null
    
    validationShowHiddenParams          = false
    validationFailUnrecognisedParams    = false
    validationLenientMode               = false

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load igenomes.config if required
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}

// This is for simple python scripts--run in the host environment to save time/cpus
// WARNING: THIS ASSUMES THE LAUCHING ENVIRONMENT HAS BASIC PYTHON MODULES INSTALLED.

profiles {

    test { includeConfig 'conf/test.config' }
    stub { includeConfig 'conf/stub.config' }
    blood_cancers { includeConfig 'conf/blood_cancers.config' }
    solid_tumors { includeConfig 'conf/solid_tumors.config' }

    ris {
        process {
            executor                  = "lsf"
            executor.queueSize        = 10
            executor.submitRateLimit  = '1/1sec'
            clusterOptions            =   { "-a 'docker(${task.container})' -q ${params.queue} -G ${params.user_group} -g ${params.job_group_name}" }
        }
        process {
            withLabel: 'process_tiny' {
                executor = 'local'
            }
        }
    }
    
    dragen2 {
        process {
            withLabel: 'dragen' {
                queue = { "dragen-2" }
                memory  = 200.GB
                cpus = 20
                time = 16.h
                clusterOptions = { "-a 'gtac-mgi-dragen(${params.dragen_container})' -m compute1-dragen-2 -G ${params.user_group} -g ${params.job_group_name} -env 'all, LSF_DOCKER_DRAGEN=y'" }
            }
        }
    }

    dragen4 {
        process {
            withLabel: 'dragen' {
                queue = { "dragen-4" }
                memory  = 400.GB
                cpus = 30
                time = 16.h                
                clusterOptions = { "-a 'gtac-mgi-dragen(${params.dragen_container})' -m compute1-dragen-4 -G ${params.user_group} -g ${params.job_group_name} -env 'all, LSF_DOCKER_DRAGEN=y'" }
            }
        }
    }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'NFChromoSeq'
    author          = """David Spencer Lab at Washington University in St. Louis"""
    description     = """Nextflow ChromoSeq tumor-only WGS assay"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=22.10.1'
    version         = '1.0dev'
    doi             = ''
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
