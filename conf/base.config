process {
    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }
    shell  = ['/bin/bash', '-euo', 'pipefail']

    // memory errors which should be retried. otherwise error out
    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Process-specific resource requirements
    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors
    withLabel:process_single {
        cpus          = { check_max( 1                  , 'cpus'    ) }
        memory        = { check_max( 6.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 4.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_low {
        cpus          = { check_max( 1     * task.attempt, 'cpus'    ) }
        memory        = { check_max( 16.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus          = { check_max( 1     * task.attempt, 'cpus'    ) }
        memory        = { check_max( 32.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus          = { check_max( 1    * task.attempt, 'cpus'    ) }
        memory        = { check_max( 64.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 16.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_low_multithread {
        cpus          = { check_max( 4    * task.attempt, 'cpus'    ) }
        memory        = { check_max( 32.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 16.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_medium_multithread {
        cpus          = { check_max( 8    * task.attempt, 'cpus'    ) }
        memory        = { check_max( 32.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 16.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_multithread {
        cpus          = { check_max( 16    * task.attempt, 'cpus'    ) }
        memory        = { check_max( 64.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 16.h  * task.attempt, 'time'    ) }
    }
}