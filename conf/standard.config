/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ChromoSeq Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    rundir                     = null
    outdir                     = null

    realign                    = false // set to true to input crams and realign them before doing analysis
    publish_dragen_outputs     = false // set to true if analysis is being performed and dragen outputs should be copied

    demuxdir                   = "${params.outdir}/demux_fastq"
    tracedir                   = "${params.outdir}/pipeline_info"

    dragen_container           = "etycksen/dragen4:4.2.4"
    user_group                 = "compute-dspencer"
    queue                      = "dspencer"
    
    job_group_name             = "/dspencer/chromoseq"

    // workflow definitions/requirements
    mastersheet_fields          = ['lanes','id','index','exceptions','mrn','accession','dob','sex','fastq_list','demux_path','dragen_path']

    // References
    fasta                     = "/storage1/fs1/dspencer/Active/spencerlab/refdata/hg38/sequence/hg38_mgi_patch.fa"
    input_cram_reference       = "${params.fasta}"

     // options for testing
    debug                      = false
    bcl_first_tile             = false
    run_demux                  = true
    run_align                  = true
    run_analysis               = true

    // ChromoSeq params
    chromoseq_inputs {
        haplotect       = "$projectDir/assets/accessory_files/haplotect.bed"
        cytobands       = "$projectDir/assets/accessory_files/hg38.cytoBandIdeo.bed.gz"
        cytoband_index  = "$projectDir/assets/accessory_files/hg38.cytoBandIdeo.bed.gz.tbi"
        centromeres     = "$projectDir/assets/accessory_files/GRCh38.GCA_000001405.2_centromere_acen.txt"
        cna_windows     = "$projectDir/assets/accessory_files/hg38.500kb_window.bed"
        gc              = "$projectDir/assets/accessory_files/hg38.gc_500kb.wig"
        mappability     = "$projectDir/assets/accessory_files/hg38.map_500kb.wig"
        pon             = "$projectDir/assets/accessory_files/nextera_hg38_500kb_median_normAutosome_median.rds_median.033020.XY_median.rds"
        vepcache        = "/storage1/fs1/dspencer/Active/clinseq/projects/chromoseq/refdata/VEP_cache"

        gene_bed                = null
        gene_bed_index          = null
        sv_bed                  = null
        sv_bed_index            = null
        sv_targets              = null
        hotspots                = null
        hotspots_index          = null
        custom_annotation_vcf   = null
        custom_annotation_index = null
        assay_specifications    = null
    }

    chromoseq_parameters {
        ichor_ploidy_levels = "2"
        ichor_bin_size = 500000
        dragen_cnv_merge_distance = 5000000
        dragen_cnv_filter_length = 500000
        min_filter_cna_size = 5000000
        min_filter_cna_abundance = 10.0
        sv_annotation_distance = 20000
        min_filter_sv_length = 5000
        max_filter_sv_length = 10000000
        min_filter_sv_abundance = 5.0
        min_filter_sv_reads = 2
        max_smallvariant_sv_length = 1000
        min_smallvariant_reads = 4
        min_smallvariant_vaf = 5.0
        max_pop_af = 0.1
        custom_annotation_parameters = "CHROMOSEQ,vcf,exact,0,TCGA_AC,MDS_AC,BLACKLIST"
        coverage_qc_levels = "10,20,40,60"
    }
    
    // Dragen inputs
    dragen_staging_path     = "/staging/intermediate-results-dir"

    dragen_inputs {
        reference               = "/storage1/fs1/dspencer/Active/spencerlab/refdata/hg38/dragen424_hg38"
        snv_noisefile           = "/storage1/fs1/dspencer/Active/clinseq/projects/chromoseq/refdata/dragen_align_inputs/hg38/dragen_v1.0_systematic_noise.nextera_wgs.120920.bed.gz"
        sv_noisefile            = "/storage1/fs1/dspencer/Active/clinseq/projects/chromoseq/refdata/dragen_align_inputs/hg38/WGS_v2.0.0_hg38_sv_systematic_noise.bedpe.gz"
        dbsnp                   = "/storage1/fs1/dspencer/Active/clinseq/projects/chromoseq/refdata/dragen_align_inputs/hg38/dbsnp.vcf.gz"
        pop_af_vcf              = "/storage1/fs1/dspencer/Active/clinseq/projects/chromoseq/refdata/dragen_align_inputs/hg38/1000G_phase1.snps.high_confidence.hg38.vcf.gz"
        dragen_adapter1         = "/storage1/fs1/dspencer/Active/clinseq/projects/chromoseq/refdata/dragen_align_inputs/hg38/dragen_adapter1.fa"
        dragen_adapter2         = "/storage1/fs1/dspencer/Active/clinseq/projects/chromoseq/refdata/dragen_align_inputs/hg38/dragen_adapter2.fa"
    }

    // MultiQC options
    multiqc_config             = null
    multiqc_title              = "ChromoSeq QC"
    multiqc_logo               = null
    max_multiqc_email_size     = '25.MB'
    multiqc_methods_description = null

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'

}

// default processes
process {
    executor            =   "lsf"
    clusterOptions      =   { "-a 'docker(${task.container})' -q ${params.queue} -G ${params.user_group} -g ${params.job_group_name}" }
}

// This is for simple python scripts--run in the host environment to save time/cpus
process {
    withLabel: 'process_tiny' {
        executor = 'local'
    }
}

profiles {

    dhslab  {
            process.executor          = "lsf"
            executor.queueSize        = 10
            executor.submitRateLimit  = '1/1sec'
            process.clusterOptions    =  { "-a 'docker1(${task.container})' -q ${params.queue} -G ${params.user_group} -g ${params.job_group_name}" }
    }
    ris {
        process {
            executor            =   "lsf"
            clusterOptions      =   { "-a 'docker(${task.container})' -q ${params.queue} -G ${params.user_group} -g ${params.job_group_name}" }
        }
    }
    
    dragen2 {
        process {
            withLabel: 'dragen' {
                queue = { "dragen-2" }
                memory  = 200.GB
                cpus = 20
                time = 16.h
                clusterOptions = { "-a 'gtac-mgi-dragen(${params.dragen_container})' -m compute1-dragen-2 -G ${params.user_group} -g ${params.job_group_name} -env 'all, LSF_DOCKER_DRAGEN=y'" }
            }
        }
    }
    dragen4 {
        process {
            withLabel: 'dragen' {
                queue = { "dragen-4" }
                memory  = 400.GB
                cpus = 30
                time = 16.h                
                clusterOptions = { "-a 'gtac-mgi-dragen(${params.dragen_container})' -m compute1-dragen-4 -G ${params.user_group} -g ${params.job_group_name} -env 'all, LSF_DOCKER_DRAGEN=y'" }
            }
        }
    }
}
